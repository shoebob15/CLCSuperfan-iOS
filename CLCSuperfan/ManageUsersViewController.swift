//
//  ManageUsersViewController.swift
//  CLCSuperfan
//
//  Created by Brennan Reinhard on 3/19/25.
//

import UIKit

class ManageUsersViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    @IBOutlet weak var table: UITableView!
    
    @IBOutlet weak var addButton: UIButton!
    private var users = [User]()
    private var selectedUser: User?
    private var selectedIndex: Int?
    @IBOutlet weak var firstName: UITextField!
    @IBOutlet weak var lastName: UITextField!
    @IBOutlet weak var email: UITextField!
    @IBOutlet weak var password: UITextField!
    @IBOutlet weak var role: UISegmentedControl!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        table.delegate = self
        table.dataSource = self
        
        refresh()

    }
    

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return users.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = table.dequeueReusableCell(withIdentifier: "userCell")!
        let user = users[indexPath.row]
        cell.textLabel!.text = "\(user.lastName), \(user.firstName)"
        cell.detailTextLabel!.text = user.role
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let deleteAction = UITableViewRowAction(style: .destructive, title: "Delete") { action, indexPath in
            NetworkManager.shared.request(api: UserAPI.deleteUser(id: self.users[indexPath.row].id.uuidString)) { (result: Result<EmptyResponse, NetworkError>) in
                switch result {
                case .success(let deleted):
                    self.users.remove(at: indexPath.row)
                    
                    DispatchQueue.main.async {
                        self.table.deleteRows(at: [indexPath], with: .automatic)
                    }
                    return
                case .failure(let error):
                    print("error deleting user, error: \(error)")
                }
            }
            

        }
        
        return [deleteAction]
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectedUser = users[indexPath.row]
        selectedIndex = indexPath.row
        
        firstName.text = selectedUser?.firstName
        lastName.text = selectedUser?.lastName
        email.text = selectedUser?.email
        password.text = "********" // passwords are hashed, so admins can't see anyway
        // TODO: maybe let admin change password for a user?
        password.isUserInteractionEnabled = false
        role.selectedSegmentIndex = selectedUser?.role == "USER" ? 0 : 1
        addButton.titleLabel!.text = "Edit"
    }
    
    @IBAction func add(_ sender: UIButton) {
        if let user = selectedUser {
            let editedUser = User(id: user.id, firstName: firstName.text!, lastName: lastName.text!, email: email.text!, password: user.password, role: role.selectedSegmentIndex == 0 ? "USER" : "ADMIN", authProvider: user.authProvider, oauthIdentity: user.oauthIdentity, points: user.points)
            
            firstName.text = ""
            lastName.text = ""
            email.text = ""
            password.text = ""
            role.selectedSegmentIndex = 0
            addButton.titleLabel!.text = "Add"
            
            password.isUserInteractionEnabled = true
            table.deselectRow(at: IndexPath(row: selectedIndex!, section: 0), animated: true)

            NetworkManager.shared.request(api: UserAPI.updateUser(id: editedUser.id.uuidString, user: editedUser)) { (result: Result<User, NetworkError>) in
                switch result {
                case .success:
                    self.refresh()
                case .failure(let error):
                    print("error updating user, \(error)")
                }
            }
            
        } else {
            // generated uuid in swift doesn't do anything, since it must be generated by the database
            let newUser = User(id: UUID(), firstName: firstName.text!, lastName: lastName.text!, email: email.text!, password: password.text!, role: role.selectedSegmentIndex == 0 ? "USER" : "ADMIN", authProvider: nil, oauthIdentity: nil, points: "0")
            
            NetworkManager.shared.request(api: UserAPI.createUser(user: newUser)) { (result: Result<User, NetworkError>) in
                switch result {
                case .success:
                    self.refresh()
                case .failure(let error):
                    print("could not create new user, \(error)")
                }
            }
        }
    }
    
    func refresh() {
        NetworkManager.shared.request(api: UserAPI.users) { (result: Result<[User], NetworkError>) in
            switch result {
            case .success(let users):
                self.users = users
            case .failure(let error):
                print("error fetching users: \(error)")
            }
            
            DispatchQueue.main.async {
                
                self.table.reloadData()
            }
        }
    }
    
    
    
}
